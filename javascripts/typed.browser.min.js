/**
 * @license
 * typed - Type checking for JavaScript - version 0.3.3
 * Copyright 2012, Alex Lawrence
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/MIT
 */
(function(){function debug(){return debug}function require(a,b){var c=require.resolve(a),d=require.modules[c];if(!d)throw new Error('failed to require "'+a+'" from '+b);return d.exports||(d.exports={},d.call(d.exports,d,d.exports,require.relative(c),global)),d.exports}var global=this;require.modules={},require.resolve=function(a){var b=a,c=a+".js",d=a+"/index.js";return require.modules[c]&&c||require.modules[d]&&d||b},require.register=function(a,b){require.modules[a]=b},require.relative=function(a){return function(b){if("debug"==b)return debug;if("."!=b.charAt(0))return require(b);var c=a.split("/"),d=b.split("/");c.pop();for(var e=0;e<d.length;e++){var f=d[e];".."==f?c.pop():"."!=f&&c.push(f)}return require(c.join("/"),a)}},require.register("typeCheck.js",function(module,exports,require,global){"use strict";var hasType=function(a,b){return b==null?!0:a==null?!1:typeof b=="string"?getNativeType(a)===b||isCustomType(a,b):matchesTypeStructure(a,b)},getNativeType=function(a){var b=/function (.{1,})\(/,c=b.exec(a.constructor.toString());return c&&c.length>1?c[1]:""},isCustomType=function(a,b){return b!=="Object"&&(new Function("a","return a instanceof "+b))(a)},matchesTypeStructure=function(a,b){for(var c in b){if(!b.hasOwnProperty(c))continue;var d=b[c];if(!hasType(a[c],d))return!1}return!0},checkIfTypeIsAvailable=function(type){if(!type||typeof type!="string"||isNativeType(type))return;try{if(eval("typeof "+type+' != "function"'))throw new Error}catch(e){throw new TypeError("Type "+type+" is not available")}},isNativeType=function(a){for(var b=0,c=nativeTypes.length;b<c;b++)if(a===nativeTypes[b])return!0;return!1},getReadableType=function(a){return typeof a=="string"?a:JSON.stringify(a).replace(/"/g,"")},nativeTypes=["Number","Boolean","String","Array","Object","Function"];exports.hasType=hasType,exports.checkIfTypeIsAvailable=checkIfTypeIsAvailable,exports.getReadableType=getReadableType}),require.register("typeParser/commentParser.js",function(a,b,c,d){"use strict";var e=c("../typeCheck"),f=function(a){var b=[],c=a.toString(),d=c.substring(c.indexOf("(")+1,c.indexOf(")"));if(d.length===0)return b;var f=g(d),i=f.length-1;do{var k=j.exec(f[i]);if(k==null)continue;var l=h(k[1]);e.checkIfTypeIsAvailable(l),b[i]=l}while(i-->0);return b},g=function(a){var b=[],c=!1,d="";for(var e=0,f=a.length;e<f;e++){if(!c&&a[e]===","){b.push(d),d="";continue}d=d+a[e],a[e]==="{"&&(c=!0),a[e]==="}"&&(c=!1)}return d!==""&&b.push(d),b},h=function(a){return a==="[]"?"Array":a==="{}"?"Object":k.test(a)?i(a):a},i=function(a){return a=a.replace(l,'"$1":"$2"'),JSON.parse(a)},j=/\/\*\s*:\s*(\{.*\}||\[\s*\]||[A-Z_$][0-9A-Z_$]*)\s*\*\//i,k=/\{.*[^\s].*\}/,l=/([A-Z_$][0-9A-Z_$]*)\s*:\s*([A-Z_$][0-9A-Z_$]*)/gi;b.parseTypes=f}),require.register("typeParser/noParser.js",function(a,b,c,d){"use strict",b.parseTypes=function(){return[]}}),require.register("typeParser/suffixParser.js",function(a,b,c,d){"use strict";var e=c("../typeCheck"),f=function(a){var b=[],c=a.toString(),d=c.substring(c.indexOf("(")+1,c.indexOf(")"));if(d.length===0)return b;var f=d.split(","),g=f.length-1;do{var i=h.exec(f[g]);if(i==null)continue;var j=i[1];e.checkIfTypeIsAvailable(j),b[g]=j}while(g-->0);return b},g=function(a){a=="$"&&(a="\\$"),h=new RegExp("\\s*[A-Z$][0-9A-Z$]*"+a+"([0-9A-Z$]*)\\s*","i")},h;g("_"),b.parseTypes=f,b.setTypeSeparator=g}),require.register("typed.js",function(a,b,c,d){"use strict";var e=c("./typeCheck"),f=function(a){if(!f.active)return a;typeof a!="function"&&errorReporting.throwError(a+" is not a function");var b=function(){var c=b.types;for(var d=0,f=arguments.length;d<f;d++)if(!e.hasType(arguments[d],c[d])){var g=e.getReadableType(c[d]);throw new TypeError("Supplied argument "+(d+1)+" is not of type "+g)}return a.apply(this,arguments)};return b.types=f.parser.parseTypes(a)||[],b};f.commentParser=c("./typeParser/commentParser"),f.suffixParser=c("./typeParser/suffixParser"),f.noParser=c("./typeParser/noParser"),f.parser=f.commentParser,f.active=!0,a.exports=f});var exp=require("typed");"undefined"!=typeof module?module.exports=exp:typed=exp})();